// tools/loadtest/k6/review-create-test.js
/**
 * k6 Load Test for Review Creation (Mock/Emulated)
 * 
 * This test simulates review creation requests to test the API's capacity.
 * Should only be run against staging or emulator environments.
 * 
 * Usage:
 *   k6 run tools/loadtest/k6/review-create-test.js
 * 
 * Options:
 *   -e BASE_URL=http://localhost:3000
 */

import http from 'k6/http';
import { check, sleep } from 'k6';
import { Rate } from 'k6/metrics';

// Custom metrics
const errorRate = new Rate('errors');

// Test configuration
export const options = {
  stages: [
    { duration: '30s', target: 5 },   // Ramp up to 5 users
    { duration: '1m', target: 20 },   // Ramp up to 20 users
    { duration: '30s', target: 0 },   // Ramp down to 0 users
  ],
  thresholds: {
    'http_req_duration': ['p(95)<2000'], // 95% of requests should be below 2s
    'errors': ['rate<0.2'],               // Error rate should be less than 20%
  },
};

const BASE_URL = __ENV.BASE_URL || 'http://localhost:3000';

export default function() {
  const url = `${BASE_URL}/api/reviews/submit`;
  
  // Generate random review data
  const reviewData = {
    orderId: `test-order-${Date.now()}-${Math.random().toString(36).substring(7)}`,
    stars: Math.floor(Math.random() * 5) + 1,
    text: `This is a test review generated by k6 at ${new Date().toISOString()}`,
    platform: 'web',
    authorName: `Test User ${Math.floor(Math.random() * 1000)}`,
    authorShowName: true,
  };

  const params = {
    headers: {
      'Content-Type': 'application/json',
    },
    tags: { name: 'ReviewCreation' },
  };

  const response = http.post(url, JSON.stringify(reviewData), params);

  // Check response
  const success = check(response, {
    'is status 201 or 400': (r) => r.status === 201 || r.status === 400 || r.status === 401,
    'response has body': (r) => r.body.length > 0,
    'response time < 2000ms': (r) => r.timings.duration < 2000,
  });

  if (response.status === 201) {
    const body = JSON.parse(response.body);
    check(body, {
      'has ok field': (b) => b.ok !== undefined,
      'has id field': (b) => b.id !== undefined,
    });
  }

  errorRate.add(!success);

  sleep(2);
}

export function handleSummary(data) {
  return {
    'stdout': textSummary(data, { indent: ' ', enableColors: true }),
  };
}

function textSummary(data, opts) {
  const { indent = '', enableColors = false } = opts || {};
  
  return `
${indent}=== Review Creation Load Test Results ===
${indent}✓ Checks passed: ${data.metrics.checks.passes}/${data.metrics.checks.passes + data.metrics.checks.fails}
${indent}✓ Requests made: ${data.metrics.http_reqs.values.count}
${indent}✓ Error rate: ${(data.metrics.errors.values.rate * 100).toFixed(2)}%
${indent}✓ Avg response time: ${data.metrics.http_req_duration.values.avg.toFixed(2)}ms
${indent}✓ p95 response time: ${data.metrics.http_req_duration.values['p(95)'].toFixed(2)}ms
${indent}✓ Max response time: ${data.metrics.http_req_duration.values.max.toFixed(2)}ms
`;
}
